@page "/main/{CardId:int}"
@page "/main"
@using Microsoft.IdentityModel.JsonWebTokens
@using System.Security.Claims
@using BB.BLL.Interfaces
@using BB.Common.Dto.Balance
@using BB.DAL.Entities
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.Mvc.Razor.TagHelpers
@inject NavigationManager NavigationManager
@inject ProtectedSessionStorage ProtectedSessionStorage
@attribute [Authorize]

@inject ICheckingBranchService CheckingService

<div class="balance">
    <p>Balance: @CheckingBalance ₴</p>
    @if (CreditBalance.HasValue)
        {
            <p>Credit Limit: @BalanceDto.CreditBalance ₴</p>
        }
</div>

<h3 style="color: white;">@CardId</h3>

<MainButtons Callback1="@Exit" Text1="Withdraw"></MainButtons>
<MainButtons Callback2="@Exit" Text2="Transfer"></MainButtons>
<MainButtons Callback3="@Exit" Text3="TopUp"></MainButtons>
<MainButtons Callback4="@Exit" Text4="Mobile TopUp"></MainButtons>
<MainButtons Callback5="@Exit" Text5="Create Credit Account"></MainButtons>
<MainButtons Callback6="@CreateDepositAccount" Text6="CreateDepositAccount"></MainButtons>
<MainButtons Callback7="@Exit" Text7="Exit"></MainButtons>

@code {

    [CascadingParameter]
    Task<AuthenticationState> AuthenticationStateTask { get; set; }

    [Parameter]
    public int? CardId { get; set; }
    
    [Parameter]
    public decimal CheckingBalance { get; set; }
    
    [Parameter]
    public decimal? CreditBalance { get; set; }

    
    public BalanceDto BalanceDto { get; set; }


    public async Task Exit()
    {
        await ProtectedSessionStorage.DeleteAsync("authToken").AsTask().ContinueWith(_ => NavigationManager.NavigateTo("/"));
    }
    
    public async Task CreateDepositAccount()
    {
        await ProtectedSessionStorage.DeleteAsync("authToken").AsTask().ContinueWith(_ => NavigationManager.NavigateTo("/"));
    }

    protected override async Task OnInitializedAsync()
    {
        if (!CardId.HasValue)
        {
            var jtiValue = (await AuthenticationStateTask).User.FindFirstValue(JwtRegisteredClaimNames.Jti);
            if (jtiValue != null)
            {
                CardId = int.Parse(jtiValue);
            }
            else
            {
                NavigationManager.NavigateTo("/");
            }
        }
        await CheckBalance();
    }

    public async Task CheckBalance()
    {
        BalanceDto = await CheckingService.CheckBalance(CardId ?? 0);

        CheckingBalance = BalanceDto.CheckingBalance;
        CreditBalance = BalanceDto.CreditBalance;
    }
    

}