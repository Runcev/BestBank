@page "/depositCheck"
@using BB.BLL.Interfaces
@inject NavigationManager NavigationManager

@inject ICardService CardService
@inject IDepositBranchService DepositBranchService
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using System.Security.Claims
@using BB.BLL.Services
@using BB.Common.Dto.DepositDto
@using Microsoft.IdentityModel.JsonWebTokens
@inject ProtectedSessionStorage ProtectedSessionStore

<p class="text" xmlns="http://www.w3.org/1999/html">Create Deposit</p>
<div class="text" style="color: green">
    
    <EditForm Model="DepositDto" OnSubmit="Deposit" style="z-index: 100;display: grid; grid-template-columns: 1fr 1fr; gap: 0.5rem; color: #00FF00; font-size: 1.5rem">
        <DataAnnotationsValidator/>
        <label>
            Deposit sum :
            <InputNumber min="0.01" @bind-Value="@DepositDto.DepSum" class="value-input" style="z-index: 100;display: inline-block;text-align: center;width: 50%;height: 2rem;font-size: 2rem;justify-self: center;margin-top: 1rem;"/>
        </label>
        <label>
            Termine :
            <InputNumber min="1" max="12" class="value-input" @bind-Value="@DepositDto.Term" style="z-index: 100;display: inline-block;text-align: center;width: 30%;height: 2rem;font-size: 2rem;justify-self: center;margin-top: 1rem;"/>
        </label>
        <label>
            Can be terminated? :
            <InputCheckbox @bind-Value="@DepositDto.CanBeTerminated" styles="z-index: 100;"/>
        </label>
        <label>
            Payments to deposit? :
            <InputCheckbox @bind-Value="@DepositDto.PaymentsToDeposit" styles="z-index: 100;"/>
        </label>

    </EditForm>
    
</div>

<MainButtons
    Text6="Deposit" Callback6="Deposit"
    Text7="Back" Callback7="GoBack"
    Text8="Delete Acc" Callback8="Delete">
</MainButtons>


@code {

    [CascadingParameter]
    Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private static int _cardId;

    public DepositDto DepositDto = new()
    {
        DepSum = 0,
        Term = 1,
        CanBeTerminated = true,
        PaymentsToDeposit = true,
    };

    private void GoBack()
    {
        NavigationManager.NavigateTo("/main", true);
    }
    
    private async Task Delete()
    {
        await DepositBranchService.CreateDepositAccount(_cardId);
        
        NavigationManager.NavigateTo("/main", true);
    }

    public async Task Deposit()
    {
        DepositDto.CardId = _cardId;
        await DepositBranchService.Deposit(DepositDto);
        NavigationManager.NavigateTo("/main", true);
    }
    

    
    protected override async Task OnInitializedAsync()
    {
        var cardIdValue = (await AuthenticationStateTask).User.FindFirstValue(JwtRegisteredClaimNames.Jti);
        if (cardIdValue == null)
        {
            NavigationManager.NavigateTo("/", true);
            return;
        }
        _cardId = int.Parse(cardIdValue);
    }
    
}